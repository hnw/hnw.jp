

6.8.  Base64 Content-Transfer-Encoding

   The Base64 Content-Transfer-Encoding is designed to represent
   arbitrary sequences of octets in a form that need not be humanly
   readable.  The encoding and decoding algorithms are simple, but the
   encoded data are consistently only about 33 percent larger than the
   unencoded data.  This encoding is virtually identical to the one used
   in Privacy Enhanced Mail (PEM) applications, as defined in RFC 1421.

Base64 Content-Transfer-Encoding は、人間的に読みやすい必要のない形式
で、任意のバイト列を表すように設計されている。 encode と decode のアル
ゴリズムは簡単である。しかし encode されたデータは encodeされないデー
タより、わずか33%ほどだが、常に大きくなる。この encoding は、 RFC 1421 
で定義されたように、 Privacy Enhanced Mail (PEM) アプリケーションに使
われるものと事実上同じである。

   A 65-character subset of US-ASCII is used, enabling 6 bits to be
   represented per printable character. (The extra 65th character, "=",
   is used to signify a special processing function.)

US-ASCII のサブセットの 65文字を使うことで、印刷可能文字1文字について6
ビットを表わせる。（余分の第65のキャラクタ "=" は、特別な機能処理を意
味するために使われる）。

   NOTE:  This subset has the important property that it is represented
   identically in all versions of ISO 646, including US-ASCII, and all
   characters in the subset are also represented identically in all
   versions of EBCDIC. Other popular encodings, such as the encoding
   used by the uuencode utility, Macintosh binhex 4.0 [RFC-1741], and
   the base85 encoding specified as part of Level 2 PostScript, do not
   share these properties, and thus do not fulfill the portability
   requirements a binary transport encoding for mail must meet.

注意事項:

このサブセットはUS-ASCIIを含む全てのバージョンのISO 646で全く同じに表
わされるという重要な性質を持っており、また、このサブセットの全ての文
字はEBCDICの全てのバージョンでも全く同じに表わされる。他のポピュラー
な encoding（uuencode ユーティリティやマッキントッシュ binhex 4.0
[RFC-1741] 、Level 2 ポストスクリプトの一部である base85 encoding な
ど）ではこのような性質を提供しないので、バイナリ転送 encoding がメー
ルのために満たすべき可搬性の要求を満たさない。

   The encoding process represents 24-bit groups of input bits as output
   strings of 4 encoded characters.  Proceeding from left to right, a
   24-bit input group is formed by concatenating 3 8bit input groups.
   These 24 bits are then treated as 4 concatenated 6-bit groups, each
   of which is translated into a single digit in the base64 alphabet.
   When encoding a bit stream via the base64 encoding, the bit stream
   must be presumed to be ordered with the most-significant-bit first.
   That is, the first bit in the stream will be the high-order bit in
   the first 8bit byte, and the eighth bit will be the low-order bit in
   the first 8bit byte, and so on.

encoding 処理は、入力ビットの24ビットの集まりを encode された4文字の出
力文字列として表現する。左から右へ処理してゆき、入力の3つの8ビットの集
まりを連結して24ビットの集まりを作る。この 24ビットは、4つの連結された 
6ビットの集まり (各々がbase64アルファベットにおける 1桁の数字に変換さ
れる) として扱われる。base64 encoding を用いてビットストリームを 
encoding する時には、ビットストリームは、MSBが最初にくるように順序づけ
られているとみなさねばならない。すなわち、ストリームの最初のビットは、
最初の8ビットの高位ビットであり、8番目のビットは、最初の8ビットの低位
ビットであり、といった具合である。

   Each 6-bit group is used as an index into an array of 64 printable
   characters.  The character referenced by the index is placed in the
   output string.  These characters, identified in Table 1, below, are
   selected so as to be universally representable, and the set excludes
   characters with particular significance to SMTP (e.g., ".", CR, LF)
   and to the multipart boundary delimiters defined in RFC 2046 (e.g.,
   "-").

それぞれの 6ビットの集まりは、64個の印刷可能な文字からなる配列への添字
として使われる。添字によって参照された文字は、出力文字列に配置される。
下記 Table 1 に示したこれらの文字は、一般的に表現可能なように選択され
ており、また、この文字集合はSMTP（"."、CR、LF）やRFC 2046で定義された
マルチパートの境界デリミタ("-")として特別な意味を持つ文字を含んでいな
い。

                    Table 1: The Base64 Alphabet

     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y

   The encoded output stream must be represented in lines of no more
   than 76 characters each.  All line breaks or other characters not
   found in Table 1 must be ignored by decoding software.  In base64
   data, characters other than those in Table 1, line breaks, and other
   white space probably indicate a transmission error, about which a
   warning message or even a message rejection might be appropriate
   under some circumstances.

encode された出力ストリームは、76文字以下の行で表されなければならない。
すべての改行、または表１に発見されない他の文字は、decode するソフトウェ
アによって無視されなければならない。base64 データにおいて、表１のキャ
ラクタまたは改行または他の空白文字以外の文字は、おそらく伝送エラーを示
す。これに対し、警告メッセージ、またはメッセージ拒絶さえも、いくらかの
情況下に於いては適切だろう。

   Special processing is performed if fewer than 24 bits are available
   at the end of the data being encoded.  A full encoding quantum is
   always completed at the end of a body.  When fewer than 24 input bits
   are available in an input group, zero bits are added (on the right)
   to form an integral number of 6-bit groups.  Padding at the end of
   the data is performed using the "=" character.  Since all base64
   input is an integral number of octets, only the following cases can
   arise: (1) the final quantum of encoding input is an integral
   multiple of 24 bits; here, the final unit of encoded output will be
   an integral multiple of 4 characters with no "=" padding, (2) the
   final quantum of encoding input is exactly 8 bits; here, the final
   unit of encoded output will be two characters followed by two "="
   padding characters, or (3) the final quantum of encoding input is
   exactly 16 bits; here, the final unit of encoded output will be three
   characters followed by one "=" padding character.

encode されるデータの終わりで24ビット未満しか利用可能でないなら、特別
な処理が行われる。完全な encoding の塊は、常にボディの終りで完成される。
24 ビット未満しか入力グループにおいて利用可能でないとき、ゼロのビット
が整数個の 6 ビットグループを形成するために(右に)加えられる。データの
終りのパディング(穴埋め)は、"=" 文字を用いて行われる。全ての base64 入
力が整数個のオクテットであるので、次の場合のみが起こりうる: (1) encode 
すべき入力の最後の塊が、24ビットの整数倍であるとき; ここでは、encode 
された出力の最終のユニットは、"=" パディングなしで 4文字の整数倍になる。
(2) encode すべき入力の最後の塊がちょうど 8ビットのとき; ここでは、 
encode された出力の最終ユニットは、2文字の後ろに2個の "=" パディング文
字が続く。(3) encode すべき入力の最後の塊がちょうど 16ビットであるとき; 
ここで、encode された出力の最終のユニットは、3文字の後ろに1個の "=" パ
ディング文字が続く。

   Because it is used only for padding at the end of the data, the
   occurrence of any "=" characters may be taken as evidence that the
   end of the data has been reached (without truncation in transit).  No
   such assurance is possible, however, when the number of octets
   transmitted was a multiple of three and no "=" characters are
   present.

"=" はデータの終りのパディングにのみ使われるので、あらゆる "=" キャラク
タの出現は、データの終りに到達した (輸送中に途中で切れずに) という証拠と
して考えられるだろう。しかし、送られたオクテット数が 3の倍数であり、どの 
"=" 文字も無い時には、そのような保証はできない。

   Any characters outside of the base64 alphabet are to be ignored in
   base64-encoded data.

base64 アルファベット以外のあらゆる文字は、base64-encode されたデータ
においては無視されねばならない。

   Care must be taken to use the proper octets for line breaks if base64
   encoding is applied directly to text material that has not been
   converted to canonical form.  In particular, text line breaks must be
   converted into CRLF sequences prior to base64 encoding.  The
   important thing to note is that this may be done directly by the
   encoder rather than in a prior canonicalization step in some
   implementations.

正規の形式に変換されていないテクスト材料に直接 base64 encoding が適用
されるならば、改行のために適当なオクテットを使うよう注意が払われなくて
はならない。特に、テクスト改行は、base64 encoding の前に CRLF シーケン
スに変換されていなければならない。重要な注意点として、これはいくらかの
実装においては、前の正規化ステップにおいてより、むしろ encoder によっ
て直接行われるかもしれないということである。

   NOTE: There is no need to worry about quoting potential boundary
   delimiters within base64-encoded bodies within multipart entities
   because no hyphen characters are used in the base64 encoding.

注意事項:
base64 encoding ではハイフン文字は使われないので、マルチパートなエンティ
ティ内の base64-encode されたボディ中の潜在的な境界デリミタを quoting 
することについて悩む必要はない。
