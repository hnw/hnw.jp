●はじめに

この記事の主題は、
Cygwinをより便利に使うため、
UNIX用のソースコードを持ってきて
コンパイルしてCygwin上で使おう、ということです。

最初に筆者のスタンスを説明しておくと、
筆者はそれほどCygwinについて肯定的な立場とはいえないかもしれません。
筆者のwebページ
（http://hnw.jp/documents/cygwin/index.html）
にも書いてあるように、VMware+Linuxや
ネットワーク越しのUNIXマシン、または
Visual Studioを使った方が便利だったりするからです。

しかし、Windowsのコンソールを使わざるを得ない状況や
積極的に使うべき状況では、Cygwinは非常に便利です。
UNIXに慣れきった人間にとって、
普段使っているツールがwindows上でも使えるというのは
大きなメリットになります。

しかし、Cygwinのメリットはそれだけではありません。
筆者にとってそれより大きいメリットは、
gccをはじめとする開発ツールが含まれているおかげで
UNIX用のソースコードがそのままWindowsでコンパイルできる、
ということです。
これはCygwinのようなアプローチを取ったからこそのメリットであり、
それができるからこそのCygwinだといえるでしょう。

この記事では、
普段はLinux環境でバイナリパッケージをインストールするくらいしかしない、
というような人でも
Cygwin環境でtar ballからコンパイルできるようになることを目標に、
簡単なコンパイル例を挙げながら説明していきます。

●コンパイルする目的

最近のCygwinは、収録パッケージが十分に充実していますし、
最近は各種UNIXでもバイナリパッケージが充実しているようですので、
コンパイルすると便利、
というのがいまいちピンとこない人もいるかもしれません。

曖昧な分類ですが、
コンパイルができて嬉しい状況というのは、
以下の2つのどちらかだろうと思います。

１．ツールを標準的に作れること

普段UNIXマシンで常用しているツールがあるけれども
標準でインストールされないから作ろう、という状況、
または、自分が注目しているツールがバージョンアップしたけど、
まだCygwin標準ではバージョンが上がってない、
などという状況がそれにあたります。
バイナリパッケージがあればいいんだけど、
ないから作る、という状況です。

２．ソースを自分好みに改造できること

一方で、ソースに手を入れられることが重要なこともあるでしょう。
例えば、標準として取り込まれそうにないパッチを当てる、
configureオプションを自分好みにするなど、
ソースがあってありがたい、という状況です。

実際問題としては、大体の要求は１に分類されます。
つまり、バイナリパッケージがあれば十分なのですが、
Cygwinの場合、バイナリパッケージがすぐにできるとは限りません。
（残念ながら
PC UNIXの各種ディストリビューションのようにはいかないでしょう）
ですので、欲しいものがある状況でただ待っているよりは、
多少の苦労をして自分で作る方がいい選択かと思います。

●他のUNIXとの違い

UNIXのソースそのままで大体コンパイルが通るとはいっても、
トラブルが皆無なわけではありません。
仕組み上、他のUNIXと比べてどうこう言うのはおかしいのですが、
コンパイルに関わるトラブルはむしろ多いです。

一方で、知識があれば簡単に対処できるトラブルや、
逆に本質的にコンパイル・実行が無理とわかるものも多くあります。

ここでは、他のLinux環境でコンパイルする場合と
Cygwin環境でコンパイルする場合との違い、
Cygwin独特の知識について挙げていきます。

◇文字コードと改行コードが違う

Cygwin環境と他のUNIX環境とでまず違うのは、
日本語の文字コードと改行コードです。
いわゆるUNIXでは日本語にはEUCが、改行コードとしては
UNIX改行コード(0x0a の1バイト)が使われていますが、
Cygwinで普通に扱うであろうファイルは
Windows/DOSで標準的に使われるSJISであり、
改行コードはDOS改行コード(0x0d 0x0a の2バイト)です。
トラブルの際に、このあたりの知識が必要になる可能性があります。

つまり、EUCでメッセージを出しているツールをコンパイルする場合には、
メッセージをSJISに変換する必要があります。
さらにSJISの場合、2バイト文字の2バイト目に'\'(0x5c)が入っている場合に、
gccがエスケープ文字として解釈するため、
該当する漢字の後ろに\をつけ、
\\としてエスケープしてやる必要があるかもしれません。

改行コードの違いについては
各種ツールやCygwinが吸収してくれることも多いので、
普段はそれほど意識することもないのですが、
やはり稀にトラブルになることがあります。
具体的には、本体とパッチの改行コードが違っていて、
パッチがうまく当たらなかった、などということがありました。
この場合、改行コードどちらかに合わせてやればOKです。

◇ユーザー管理やパーミッションなどが違う

どういう管理方式を採用するかにもよるのですが、
Cygwin環境では、
UNIXと全く同一のパーミッションの概念を仮定することはできません。
私の手元にはWindows2000+Cygwin1.3.10の環境がありますが、
この環境では、
ownerのwrite permission以外は何も変更できないようです。
NT系でNTFSの環境であれば、
環境変数CYGWINをntsecに設定することで
より強力なパーミッション管理が可能なようですが、
私はFAT32で使っていますので利用できません。

また、ファイルのオーナーに関しても、
ファイルシステムがFATの場合には記録されません。

一方で、ソース中に
groupやotherにread permissionが出ていたらエラー、
といったコードが書いてあることは珍しくありません。
こうしたソースをコンパイルしようとした場合、
コンパイルは通るけれどもうまく動かない、ということが起こります。
こういったコードは本質的にどうしようもありませんから、
そのチェックをする部分のコードをソース中から取り除くしかありません。

◇実行ファイル名が違う

当然といえば当然ですが、
makeの結果作られる実行ファイルの名前が
普通のUNIXとCygwin環境とでは違います。
普通の環境で
gcc -o hogehoge hogehoge.c などとやってできたバイナリは
hogehogeという名前のはずですが、
Cygwin環境では、hogehoge.exe になります。

これが原因で、makeは通るけどmake installが通らない、
ということがあります。
もちろん、上の説明からわかるように、
全然クリティカルではありませんので、
失敗した場合は対応するファイル名を変更して、
手動で同じコマンドを打てば十分です。

最近はCygwinのinstallコマンドに細工がしてあり、
install hogehoge /usr/local/bin などとやると
hogehoge.exeを見つけてくれるのですが、
installコマンドを使っていない場合にはどうしようもありません。

◇ファイル名として使える文字が違う

これも上と同じようにWindowsの仕組みからくる制限なのですが、
ファイル名として使える文字の制限が大抵のUNIXよりきつくなっています。

まず'\'は確実に使えませんし、
私の環境ではいくらエスケープしても
'*',':','?','<','>','|'が使えませんでした。

特に対処をせずにコンパイルしたツールでは、
こういったファイル名のファイルを作ろうとして
作れない、ということがあります。
以前に、自分でコンパイルしたwgetで
'?'を含むURLに対応するファイルが作れなかった、
ということがありました。

◇システム寄りのコードは動かない

あまりにシステム寄り、OS寄りなものはまず動きません。
筆者の思い込みでコンパイルを試していないツールも多そうなのですが、
少なくとも Linux用とかSolaris用とか書いてあったり、
/proc/や/dev/の下を見ているようなものは動く可能性は低いでしょう。
（CygwinはどのUNIX互換OSとも似ているとは言いがたいです。
/procなんてCygwinにはそもそもないですし）
システムコールioctl()なども、
動くものは動くようですが、ものによっては動かないようです。

◇特定のシステムコールが遅い

UNIXのシステムコールを通すために、
少々無理なエミュレーションをしているようですので、
システムコールによってはかなり遅くなります。
昔からよく言われるのが、
ファイル情報を取るシステムコールstat()の遅さです。

遅いのが原因で動かないツールはないでしょうが、
違いという意味で挙げてみました。


●それでもうまくいかない場合

こうしてトラブルの原因を見てきましたが、
正直なところ、トラブルなしで一発で通らないときは
面倒なことの方が多いかもしれません。

もちろん、トラブルが起きないことの方が多いとは思います。
特に、最近はCygwinの知名度がかなり上がっていることもあり、
ソース側でCygwin向けの対策をしてあることも珍しくありません。
Cygwin環境のgccでは、__CYGWIN__ が定義されるのですが、
ソース中で __CYGWIN__ が定義されているかどうかを見ているならば、
コンパイルが通る確率は高そうです。

しかし、Cygwinでは割と頻繁にヘッダファイルに変更が入ったりして、
前のバージョンでコンパイルが通っていたものが
うまくいかなくなったりします。
仕組み的に絶対に無理、というもの以外は
苦労してソースをいじれば動くはずなのですが、
一人で悩むよりは誰かに聞いた方が早いかもしれません。

日本語での情報交換の場としては、
Cygwin ML(http://www.docile.org/users/docile/cygwin/ml.html)
か、
掲示板2ちゃんねるのUNIX板(http://pc.2ch.net/unix/)
にあるCygwinスレッド、
または各Cygwinサイトの掲示板あたりが主なところかと思います。

もちろん、こういったところにただ「全然動きません」などとしか
書けないならば、使うのをあきらめるべきです。
他人に時間を使ってもらって問題を解決しようとしているのですから、
自分なりに頑張った成果を整理して見せるのが最低限の礼儀だと思います。
自分は10秒であきらめたけど、わかる人教えてください、
などという態度では返事を書く数分さえ誰も費やしてくれないでしょう。


●コンパイルの実例

以下、例としてlessに日本語化パッチをあてたものを作ることにします。
Cygwin標準でlessはついてくるのですが、
残念ながら日本語のファイルを表示させようとすると、
EUC、JISのファイルはもちろん
そのまま表示させれば表示できるはずのSJISのファイルさえ読めません。

これに対して、
EUC,JIS,SJISそれぞれの文字コードのファイルが表示できるようになる
マルチバイト対応パッチが公開されています。
原稿執筆時点でのlessのバージョンは358、
それに対するマルチバイト対応パッチのバージョンはless-358-iso254です。
それぞれURLは
      http://www.greenwoodsoftware.com/less/
      http://www.io.com/~kazushi/less/
です。
これがあると、
上記の日本語を自動変換してくれて読めて非常に便利です。
また、.gzなどの圧縮されたファイルを直接読めるようにもなります。
これなしでの生活は考えられないというほどですので、
例として挙げてみました。

まず、less-358.tar.gzと
less-358-iso254.patch.gzを
ダウンロードし、同じディレクトリに置きます。
そして、図Aの1行目のように展開し、
展開したディレクトリに移動(2行目)します。
（図Aでの$はプロンプトです）
3行目で、gzipで圧縮されているパッチを展開して標準出力に出し、
パイプを通してpatchコマンドに渡すことで差分を適用しています。

ソースから作ることが少ない人のために説明しますと、
ソースを展開した後の手順というのは、
大抵の場合「INSTALL」や「README」などというファイルの中に書いてあります。
もちろん英語ですが、大抵は大した内容ではありません。
./configure を実行して、
make と打って、 make install とやればOK、
などといった内容が書いてあるのが普通です。
makeというのは、
同一ディレクトリにあるMakefileというファイルの内容
に従って一連の作業を行うプログラムです。
普通はMakefileにコンパイル手順を書き、
makeなどと打つだけでコンパイル作業が一通りできるようにします。
./configureというのは環境ごとのディレクトリ構造や
違いを調べ、Makefileやヘッダファイルを書き出すようなスクリプトです。

lessの場合、READMEにオリジナルパッケージの情報が書いてあり、
README.iso.jpにJISでパッチの情報が書かれています。
ただ、素のwindows+Cygwinだけの状況だと、
JISのファイルって読みようがないんですよね…。
読めない人は同内容で英語のREADME.isoを読むしかないです。
これらのファイルを解読した結果、
筆者は、./configureを実行し（4行目）
README.iso.jpの内容に従ってdefines.hを2行書き換え(5,6行目）、
make して make install としました。
（読者の皆さんも筆者の書いた手順を鵜呑みにせず、READMEを読んでみて下さい）
以上で、/usr/local/bin/less.exeなどがインストールされます。

configureの際に特に何も指定しなければ、
このlessを含め、
tar ballからmakeして作ったツールは
多くが /usr/local/bin にインストールされます。
標準のツールを上書きするようなツールを入れることも多いので、
PATHの前の方に/usr/local/bin/を入れておくのが常套手段です。

＝＝＝＝＝＝＝＝＝＝
$ tar xzf less-358.tar.gz
$ cd less-358
$ gzip -cd ../less-358-iso254.patch.gz | patch -p1
$ ./configure
$ cp define.h define.h.org
$ vi define.h
$ diff defines.h.org defines.h
186c186
< #define       DEFCHARSET      "iso8"
---
> #define       DEFCHARSET      "japanese-sjis"
292c292
< #define HAVE_LOCALE 1
---
> #define HAVE_LOCALE 0
$ make
$ make install
＝＝＝＝＝＝＝＝＝＝
図A


●他の便利なツール

使い方にもよるのですが、
筆者の場合は他のUNIXのファイルをCygwin上に持ってくることがよくあります。
こういった場合に、日本語回りの処理をしてくれるツールが重宝するのですが、
そういったツールをCygwin標準で提供するような気配はなさそうに思います。
ですので、やはり自分でコンパイルすることになります。

日本語回りで筆者がよく使うツールとして、
文字コード変換用のフィルタである
nkf(http://bw-www.ie.u-ryukyu.ac.jp/~kono/software.html)
があります。
これは改行コードの変換もできるので便利です。

また、日本語対応の16進ダンプのツールとして、
筆者はhex(http://www.ganaware.jp/S/hex/index.html)というものを愛用しています。
EUC,JIS,SJISのそれぞれに対応しているのが筆者にはとても便利です。

筆者は使わないのですが、
viユーザーの場合はviの日本語対応も必須になるでしょう。

●バイナリパッケージ

これまで見てきたように、
Cygwin標準で配布されるバイナリだけでは、
日本人にとっては少々不満な状況です。

これに対し、日本人の手によるバイナリパッケージのプロジェクトとして
HeavyMoon(http://www.sixnine.net/Cygwin/index_ja.html)や
Peach Cygwin(http://peach.sourceforge.net)があります。
また、Cygwinの情報サイトの中には、
コンパイルしたバイナリを配っているサイトも多くあります。

筆者は他人がコンパイルするのを待っていられないほどせっかちなのと、
習慣的なこともあって、基本的には自分でコンパイルするのですが、
他の人が作ってくれればはるかに楽だろうな、といつも思っています。

●まとめ

ざっと見て来ましたが、
筆者は他の環境でのコンパイル経験が多少ある程度で、
Cygwinに関して非常に詳しいわけではありませんので、
いまいち充実していない内容になってしまったかもしれません。
そして、
どうもコンパイルは面倒だという印象を与えてしまったかもしれません。
しかし、面倒な面は確かにあるかもしれませんが、
面倒＝やりたくない、と思われるのは不本意です。

筆者はこの原稿を書くためにツールをコンパイルをしていて、
素のSolarisにあれこれ必要なツールを入れていた頃を思い出しました。
最近のPC UNIXはバイナリパッケージが充実しすぎて、
自分でコンパイルする気がしないほどなのですが、
Cygwin環境では、
ないものは作るしかないという状況に戻れる気がします。
この環境は、皮肉ではなく面白い環境です。
手元にSolarisしかなかった頃と違って、
動かなければあきらめて他のUNIXで使えばいい、
という気楽さもあり、
久々のコンパイル作業に新鮮な楽しさを感じました。

こういったプロセスを
楽しめる人とそうでない人とがいるのは承知しているのですが、
この記事が読者の皆様の楽しいCygwin lifeを送る助けになれば幸いです。
